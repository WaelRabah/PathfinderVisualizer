{"version":3,"sources":["components/Header.js","components/Node.js","components/Grid.js","algorithms/A*.js","algorithms/Djikstra.js","algorithms/DFS.js","App.js","serviceWorker.js","index.js"],"names":["Header","setAlgorithm","visualize","Algorithms","MyAppBar","styled","AppBar","backgroundColor","MyToolBar","Toolbar","display","justifyContent","position","className","KeyboardArrowDown","map","algo","index","key","onClick","name","Node","node","type","x","y","id","MouseEnter","MouseDown","MouseUp","onDragHandler","onMouseUp","e","onMouseDown","preventDefault","onMouseEnter","onDrag","Grid","grid","row","index1","Astar","manhattanDistance","A","B","Math","abs","search","startPoint","endPoint","gridSize","current","open","close","path","visited","g","h","f","push","minNode","min","idx","filter","val","currentNode","parent","reverse","splice","length","generateChildren","open1","grid1","list","minIdx","i","dx","dy","forEach","item","w","isIn","l","Djikstra","heap","sort","data","a","b","d","insert","pop","shift","isEmpty","has","this","discovered","end","Infinity","child","neighbor","minDist","DFS","children","v","undefined","dfsVisit","p","App","state","mousePressed","startNode","endNode","selectedAlgorithm","object","algoName","moveStart","moveEnd","animated","mouseUp","setState","mouseDown","clearPath","mouseEnter","document","getElementById","clearGrid","j","clearParent","prev","ret","animateVisited","animatePath","node1","setTimeout","visitedFinished","Box","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6817e85a.chunk.js","sourcesContent":["import React  from 'react'\nimport {AppBar, Toolbar   }  from  '@material-ui/core'\nimport { KeyboardArrowDown } from '@material-ui/icons'\nimport { styled } from '@material-ui/core/styles';\nimport  './header.css'\nfunction Header({setAlgorithm,visualize,Algorithms}) {\n\n    const MyAppBar = styled(AppBar)({\n       backgroundColor : '#3366cc'\n       ,\n      });\n      const MyToolBar = styled(Toolbar)({\n        backgroundColor : '#3366cc'\n        ,\n        display : 'flex',\n        justifyContent :'space-between'\n       });\n     \n        \n    return (\n       <MyAppBar position='static' >\n            <MyToolBar>\n           \n            <div className='dropdown'>\n               <div className='label'> Algorithms </div> \n               <div className='icon'>\n               <KeyboardArrowDown></KeyboardArrowDown>\n               </div>\n              <div className={`dropdownContent`}>\n              {\n                Algorithms.map(\n                  (algo,index)=>(\n                    <div key={index} className='algo' onClick={()=>setAlgorithm(algo)}>{algo.name}</div>\n                  )\n                )\n              }\n              </div>\n             \n            </div>\n            \n            <div className='btn-cover'>\n            <button \n            className='btn'\n            onClick={visualize}\n            >Visualize</button>\n            </div>\n            </MyToolBar>\n       </MyAppBar>\n    )\n}\n\nexport default Header\n","import React  from 'react'\nimport './node.css'\nconst Node=({node : {type,x,y,id},MouseEnter,MouseDown,MouseUp,onDragHandler})=> {\n    return (\n        <div \n        id={`${id}`}\n        className={`node ${type}`}\n        onMouseUp={(e)=>{  MouseUp()}}\n        onMouseDown={(e)=>{ e.preventDefault(); MouseDown(x,y)}}\n        onMouseEnter={()=>MouseEnter(x,y)}\n        onDrag={()=>onDragHandler()}\n        >\n           \n        </div>\n    )\n}\nexport default  Node ;","import React from 'react'\nimport Node from './Node'\nimport './grid.css'\nfunction Grid({ grid, MouseEnter, MouseUp, MouseDown , onDragHandler }) {\n    return (\n        <div id='grid'>\n\n            {\n                grid.map((row, index) => {\n            return (\n                <div\n                    key={`row${index}`}\n                    id='row'>\n                    {\n                        row.map((node, index1) => {\n                            return (\n                                <Node\n                                    node={node}\n                                    key={`${node.id}`}\n                                    MouseEnter={MouseEnter}\n                                    MouseUp={MouseUp}\n                                    MouseDown={MouseDown}\n                                    onDragHandler={onDragHandler}\n                                />\n                            )\n                        })\n                    }\n                </div>\n            )\n        })\n            }\n\n\n        </div>\n\n    )\n}\n\nexport default Grid\n","const Astar = {\n    manhattanDistance : (A,B)=>\n    {\n        var d1 = Math.abs (A.x - B.x);\n        var d2 = Math.abs (A.y - B.y);\n        return d1 + d2; \n    \n        \n    },\n    search : function (grid,startPoint,endPoint,gridSize)\n    {  var current = null \n       var open=[]\n       var close = [] \n       var path = []\n       var visited=[]\n    \n       grid[startPoint.x][startPoint.y].g=0\n       grid[startPoint.x][startPoint.y].h=Astar.manhattanDistance(grid[startPoint.x][startPoint.y],grid[endPoint.x][endPoint.y])\n       grid[startPoint.x][startPoint.y].f=grid[startPoint.x][startPoint.y].g+grid[startPoint.x][startPoint.y].h\n       open.push(grid[startPoint.x][startPoint.y])\n       \n       while (open.length > 0)\n       {\n        const {min,idx} = Astar.minNode(open)\n        current = min \n        visited.push(current)\n        open=open.filter((val,index)=>index!== idx)\n        close.push(current)\n        if (current.x===endPoint.x && current.y===endPoint.y)\n        {\n            \n            var currentNode = current\n            while (currentNode)\n            {\n                    path.push({x:currentNode.x,y:currentNode.y})\n                    currentNode=currentNode.parent\n                \n    \n            }\n            path=path.reverse()\n            path.splice(0,1)\n            path.splice(path.length -1 ,1)\n            visited.splice(0,1)\n            visited.splice(visited.length -1 ,1)\n            const ret = {path , visited}\n            return ret\n        }\n        const {open1 , grid1}=Astar.generateChildren(grid,current,close,open,startPoint,endPoint,gridSize)\n        open = open1\n        grid = grid1\n       \n       } \n       const ret = {path , visited}\n       return (ret)\n    },\n    minNode : function (list)\n    {\n      var min =list[0]\n      var minIdx = 0 \n      for (let i = 1 ; i< list.length ; i++)\n      {\n          if (list[i].f < min.f)\n          {\n              min = list[i]\n              minIdx = i\n          }\n      }\n      return {min : min , idx : minIdx}\n    },\n  generateChildren :  function (grid , current,close,open,startPoint,endPoint,gridSize)\n{\n    //    const children=[\n    //      {dx : 0 , dy : 1 },{dx : 0 , dy : -1 }\n    //     ,{dx : 1 , dy : 1 },{dx : 1 , dy : -1 }\n    //     ,{dx : -1 , dy : 1 },{dx : -1 , dy : -1 }\n    //     ,{dx : 1 , dy : 0 },{dx : -1 , dy : 0 }]\n    \n    const children=[\n        {dx : 0 , dy : 1 },{dx : 0 , dy : -1 }\n       ,{dx : 1 , dy : 0 },{dx : -1 , dy : 0 }]\n       children.forEach(\n           item=>{\n               \n               const x = current.x+item.dx\n               const y = current.y+item.dy\n           \n            if (x<gridSize.h && y < gridSize.w && x>= 0 && y >= 0)\n            {\n                const node = grid[x][y]\n                \n                if (Astar.isIn(close,node) || (node.type==='barrier'))\n                {\n\n                    return \n                }\n              \n                node.g=current.g+Astar.manhattanDistance(node,current)\n                node.h=Astar.manhattanDistance(node,endPoint)\n                node.f=node.g+node.h\n                grid[current.x+item.dx][current.y+item.dy] = node\n                if (Astar.isIn(open,node))\n                {\n                   \n                        return\n                    \n                }\n            \n                  node.parent=current\n                open.push(node)\n                \n            }   \n            \n           }\n       )\n        return {grid1 : grid , open1 : open }\n},\nisIn : function  (l,node)\n{\n    for (let i =0 ; i<l.length ; i++)\n    {\n        if (l[i].x===node.x && l[i].y===node.y)\n            return true\n        \n    }\n    return false\n}\n}\nexport default Astar","const Djikstra = {\n  manhattanDistance: (A, B) => {\n    var d1 = Math.abs(A.x - B.x);\n    var d2 = Math.abs(A.y - B.y);\n    return d1 + d2;\n  },\n  heap: class heap {\n    constructor() {\n      this.data = [];\n    }\n    sort = () => {\n      this.data.sort((a, b) => a.d <= b.d);\n    };\n    insert = (x) => {\n      if (this.data.length === 0) {\n        this.data.push(x);\n        return;\n      }\n      this.data.push(x);\n      this.sort();\n    };\n    pop = () => {\n      if (this.data.length === 0) {\n        return null;\n      }\n      const x = this.data.shift();\n\n      return x;\n    };\n    isEmpty = () => this.data.length === 0;\n\n    has = (node) => {\n      for (let i = 0; i < this.data.length; i++) {\n        if (this.data[i].x === node.x && this.data[i].y === node.y) {\n          return true;\n        }\n      }\n      return false;\n    };\n  },\n  search: function (grid, startPoint, endPoint, gridSize) {\n    var current=null\n    var heap = new Djikstra.heap();\n    var discovered = [];\n    var path = []\n    var end = grid[endPoint.x][endPoint.y];\n    grid.map((row) => {\n      row.map((node) => {\n        node.d = Infinity;\n        return node;\n      });\n      return row;\n    });\n    grid[startPoint.x][startPoint.y].d = 0;\n    heap.insert(grid[startPoint.x][startPoint.y]);\n \n    while (!heap.isEmpty()) {\n      current = heap.pop();\n      discovered.push(current);\n      const children = [\n        { dx: 0, dy: 1 },\n        { dx: 0, dy: -1 },\n        { dx: 1, dy: 0 },\n        { dx: -1, dy: 0 },\n      ];\n      // eslint-disable-next-line no-loop-func\n      children.forEach((child) => {\n   \n        \n      \n        const x = current.x+child.dx\n        const y = current.y+child.dy\n    \n     if (x<gridSize.h && y < gridSize.w && x>= 0 && y >= 0)\n     {\n        const neighbor = grid[x][y];\n        if ( (neighbor.type==='barrier'))\n        {\n\n            return \n        }\n        if (!Djikstra.isIn(discovered, neighbor)) {\n          const minDist = Math.min(neighbor.d, current.d + 1);\n          if (minDist !== neighbor.d) {\n            neighbor.d = minDist;\n            neighbor.parent = current;\n          }\n          if (heap.has(neighbor))\n          {\n              heap.sort()\n          }\n          else \n          {\n              heap.insert(neighbor)\n          }\n        }\n    }\n      });\n      \n      \n      if (current.x=== endPoint.x && current.y === endPoint.y)\n      {\n      \n        current = end \n        while (current.parent)\n        {\n            path.push(current)\n            current=current.parent\n        }\n       path= path.reverse()\n       var visited = discovered\n    \n                path.splice(path.length -1 ,1)\n                visited.pop()\n                const ret = {path , visited}\n          \n    return ret\n      }\n\n    }\n\n        return({path : [] , visited : discovered})\n    \n\n  },\n\n  isIn: function (l, node) {\n    for (let i = 0; i < l.length; i++) {\n      if (l[i].x === node.x && l[i].y === node.y) return true;\n    }\n    return false;\n  },\n};\nexport default Djikstra ;\n","const DFS = {\n    visited : [] ,\n    search:(grid , startPoint , endPoint , gridSize)=>{\n        DFS.visited=[]\n        const children=[\n            {dx : -1 , dy : 0 },{dx : 0 , dy : 1 }\n          ,{dx : 1 , dy : 0 } ,{dx : 0 , dy : -1 }]\n           DFS.visited.push(startPoint)\n    for (let i =0 ; i<children.length ; i++)\n    {\n         const child = children[i]   \n         var {x,y} = startPoint\n         const {dx , dy} = child\n         x=x+dx\n         y=y+dy\n         if (!(x<gridSize.h && y < gridSize.w && x>= 0 && y >= 0))\n         { continue  }\n         const v = grid[x][y]\n         if (v.type==='barrier')\n         {continue}\n         if (DFS.isIn(DFS.visited,v) )\n         { continue  }\n     \n      \n\n         if ((v.x===endPoint.x && v.y === endPoint.y) )\n         {   DFS.visited.push(v)\n             startPoint.parent = undefined\n             v.parent = startPoint\n             let path = []\n             x=endPoint.x\n             y=endPoint.y\n \n             let current =  grid[x][y]\n             while (current)\n             {\n                 path.push({x : current.x , y : current.y})\n \n                 current = current.parent\n                \n             }\n             path=path.reverse()\n             path.splice(0,1)\n             path.splice(path.length -1 ,1)\n             const res = {path : path , visited : DFS.visited}\n             return(res)\n         }\n         else \n         {\n            DFS.visited.push(v) \n            const dfsvis = DFS.dfsVisit(grid , v ,children,endPoint,gridSize)\n            if (dfsvis)\n            {\n                startPoint.parent = undefined\n                v.parent = startPoint\n                let path = []\n                x=endPoint.x\n                y=endPoint.y\n    \n                let current =  grid[x][y]\n                while (current)\n                {\n                    path.push({x : current.x , y : current.y})\n    \n                    current = current.parent\n                   \n                }\n                path=path.reverse()\n                path.splice(0,1)\n                path.splice(path.length -1 ,1)\n                DFS.visited.splice(0,1)\n                DFS.visited.splice(DFS.visited.length  ,1)\n                const res = {path : path , visited : DFS.visited}\n                return(res)\n            }\n         }\n           \n    }\n\n    return({path : [] , visited : DFS.visited})\n    },\n    dfsVisit :(grid , p ,children,endPoint,gridSize)=> {\n        for (let i =0 ; i<children.length ; i++)\n        {\n             const child = children[i]   \n             var {x,y} = p\n             const {dx , dy} = child\n             x=x+dx\n             y=y+dy\n \n             if (!(x<gridSize.h && y < gridSize.w && x>= 0 && y >= 0))\n             { continue  }\n             const v = grid[x][y]\n             if (v.type==='barrier')\n             {continue}\n             if (DFS.isIn(DFS.visited,v) )\n             { continue  }\n             \n             \n             if ((v.x===endPoint.x && v.y === endPoint.y) )\n                 {\n                             \n                     v.parent = p\n                     return true\n                 }\n                 else \n                 {\n                    DFS.visited.push(v) \n                    const dfsvis = DFS.dfsVisit(grid , v ,children,endPoint,gridSize)\n                    if (dfsvis)\n                    {\n                        v.parent = p\n                        return true  \n                    }\n                 }\n               \n        }\n            return false\n    }\n    ,\nisIn : function  (l,node)\n{\n    for (let i =0 ; i<l.length ; i++)\n    {\n        if (l[i].x===node.x && l[i].y===node.y)\n            return true\n        \n    }\n    return false\n}\n}\nexport default DFS","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport { Container, Box } from \"@material-ui/core\";\nimport Grid from \"./components/Grid\";\nimport Astar from './algorithms/A*'\nimport Djikstra from \"./algorithms/Djikstra\";\nimport DFS from \"./algorithms/DFS\";\n\nexport default class App extends Component {\n  state = { \n    grid: [], \n    mousePressed: false, \n    startNode: { x: 0, y: 7 }, \n    endNode: { x: 7, y: 10 } ,\n    selectedAlgorithm : false ,\n    path : [],\n    gridSize : {h : 14 , w : 30},\n    visited : [] ,\n    Algorithms : [{name :'A*' , object : Astar},{name :'Djikstra' , object : Djikstra},{name :'DFS' , object : DFS}],\n    algoName : '',\n    moveStart : false ,\n    moveEnd : false,\n    animated : false\n    \n  };\n  componentDidMount() {\n    let x=0\n    var grid1 = [];\n    for (let i = 0; i < this.state.gridSize.h; i++) {\n      var a = [];\n      for (var j = 0; j < this.state.gridSize.w; j++) {\n        x++\n        a.push({\n          x: i,\n          y: j,\n          type: \"\",\n          id : x,\n          parent : undefined\n\n        });\n      }\n      grid1.push(a);\n    }\n    grid1[this.state.startNode.x][this.state.startNode.y].type = 'start'\n    grid1[this.state.endNode.x][this.state.endNode.y].type = 'end'\n    \n    this.setState({ grid: grid1 });\n  }\n  mouseUp = () => {\n\n    this.setState({\n      moveStart : false ,\n      mousePressed: false,\n      moveEnd : false\n    });\n  };\n  mouseDown = (x, y) => {\n    this.clearPath()\n    const { grid } = this.state;\n    if (grid[x][y].type === \"start\" )\n      {\n        this.setState({moveStart : true})  \n        return\n      }\n    if (grid[x][y].type === \"end\" )\n      {\n        this.setState({moveEnd : true})  \n        return\n      }\n    grid[x][y].type = grid[x][y].type === \"barrier\" ? \"\" : \"barrier\";\n    this.setState({\n      mousePressed: true,\n      grid: grid,\n    });\n  };\n  onDrag = () => {\n    this.setState({ mousePressed: false, moveStart : false , moveEnd : false })\n  }\n  setAlgorithm = (algo) => {\n    \n        this.setState(\n          {\n            selectedAlgorithm : algo , \n            algoName : `Selected algorithm : ${algo.name}`\n          }\n        )\n  }\n  mouseEnter =async (x, y) => {\n    const {grid , startNode , endNode , moveStart , moveEnd , mousePressed} = this.state\n    if (moveStart)\n    {\n      this.clearPath()\n      grid[startNode.x][startNode.y].type=''\n      grid[x][y].type='start'\n\n      this.setState({\n        grid: grid,\n        startNode : {x: x , y: y}\n      });\n      return\n    }\n    if (moveEnd)\n    {\n      \n      grid[endNode.x][endNode.y].type=''\n      grid[x][y].type='end'\n\n      this.setState({\n        grid: grid,\n        endNode : {x: x , y: y}\n      });\n      return\n    }\n    if (mousePressed) {\n      \n      \n      if (grid[x][y].type === \"start\" || grid[x][y].type === \"end\")\n      return\n      grid[x][y].type = grid[x][y].type === \"barrier\" ? \"\" : \"barrier\";\n      this.setState({\n        grid: grid,\n      });\n    }\n  \n  };\n  clearPath = ()=>{\n    var {visited,grid} = this.state\n    visited.forEach(node=>{\n      if (node.type==='start')\n      return\n      grid[node.x][node.y].type=''\n      grid[node.x][node.y].parent=null\n      const node1=document.getElementById(`${node.id}`)  \n      node1.className='node'\n    })\n    this.setState({grid : grid,path:[],visited : []})\n    \n  }\n  clearGrid = ()=>{\n    \n    var grid1 = [];\n    let x = 0\n    for (let i = 0; i < this.state.gridSize.h; i++) {\n      var a = [];\n      for (var j = 0; j < this.state.gridSize.w; j++) {\n        x++\n        a.push({\n          x: i,\n          y: j,\n          type: \"\",\n          id : x\n\n        });\n        const node1 = document.getElementById(`${x}`)\n        node1.className=`node`\n      }\n      grid1.push(a);\n    }\n    grid1[this.state.startNode.x][this.state.startNode.y].type = 'start'\n    grid1[this.state.endNode.x][this.state.endNode.y].type = 'end'\n    const node1 = document.getElementById(`${grid1[this.state.startNode.x][this.state.startNode.y].id}`)\n    node1.className=`node start`\n    const node2 = document.getElementById(`${grid1[this.state.endNode.x][this.state.endNode.y].id}`)\n    node2.className=`node end`\n    this.setState({ grid: grid1 ,path : [] });\n  }\n  clearParent = ()=>{\n    this.setState(\n      prev=>{\n        const {grid} = prev\n\n        grid.map(\n          row=>row.map(node=>{node.parent=undefined; return(node);})\n        )\n      }\n    )\n  }\n  visualize =async ()=>{\n    const {startNode , endNode , grid , selectedAlgorithm} = this.state\n    if (!selectedAlgorithm)\n      {\n         await this.setState({algoName : 'Please select an algorithm'})\n          return\n      }\n    this.clearPath()\n  const  ret =await this.state.selectedAlgorithm.object.search(grid , startNode,endNode,this.state.gridSize)\n\n    var {path,visited} = ret\n    this.setState(\n      {\n        path : path ,\n        visited : visited\n        \n      }\n       \n    )\nthis.animateVisited()\nthis.clearParent()\n}\n  animatePath = ()=>{\n    \n    const { grid , path } = this.state\n    \n    for (let i=0;i<path.length ; i++)\n    {\n      const node = path[i]\n      const node1 = document.getElementById(`${grid[node.x][node.y].id}`)\n      setTimeout(()=>{\n        grid[node.x][node.y].type='path'\n        node1.className='node path'\n    },i*20)\n      \n    }\n    this.setState({grid : grid})\n    \n  }\n  animateVisited = async ()=>{\n    const { grid , visited } = this.state\n        for (let i=0;i<visited.length ; i++)\n        {\n        \n          \n          const node = visited[i]\n          const node1 = document.getElementById(`${node.id}`)\n          \n          setTimeout(()=>{\n            if (node.type==='path' || node.type==='start')\n            {\n              return\n            }\n            grid[node.x][node.y].type='visited'\n            node1.className='node visited'\n        },i*5)\n        if (i===visited.length-1)\n        {\n          setTimeout(()=>{this.animatePath()},5*i)\n          return\n          \n        }\n        }\n    \n        this.setState({grid : grid , visitedFinished : true})\n      }\n  render() {\n    return (\n      <Box>\n        <Header \n        setAlgorithm={this.setAlgorithm} \n        visualize={this.visualize}\n        Algorithms={this.state.Algorithms}\n         />\n        <Container>\n        <div className='dashboard'>\n          <div className='algorithm'>{this.state.algoName}</div>\n        <div className='btn-cover1'>\n        <button className='btn1' onClick={this.clearGrid}>\n            Clear Grid\n        </button>\n        <button className='btn1' onClick={this.clearPath}>\n        Clear Path\n    </button>\n        </div>\n        </div>\n       \n          <Grid\n            grid={this.state.grid}\n            MouseEnter={this.mouseEnter}\n            MouseDown={this.mouseDown}\n            MouseUp={this.mouseUp}\n            onDragHandler={this.onDrag}\n          />\n        \n        </Container>\n      </Box>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}